class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        res = []
        for i in range(len(nums)):
            if i > 0 and nums[i-1] == nums[i]:
                continue
            
            l = i + 1
            r = len(nums) - 1
            while l < r:
                threeSum = nums[i] + nums[l] + nums[r]
                if threeSum == 0:
                    res.append([nums[i], nums[l], nums[r]])
                    l += 1
                    while nums[l] == nums[l-1] and l < r:
                        l += 1
                elif threeSum > 0 :
                    r -= 1
                else:
                    l += 1

        return res



# Write the above code in java
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();

        // Sort the array
        Arrays.sort(nums);

        for (int i = 0; i < nums.length - 2; i++) {
            // Skip duplicate elements for i
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }

            int j = i + 1;
            int k = nums.length - 1;

            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];

                if (sum == 0) {
                    // Found a triplet with zero sum
                    ans.add(Arrays.asList(nums[i], nums[j], nums[k]));

                    // Skip duplicate elements for j
                    while (j < k && nums[j] == nums[j + 1]) {
                        j++;
                    }

                    // Skip duplicate elements for k
                    while (j < k && nums[k] == nums[k - 1]) {
                        k--;
                    }

                    // Move the pointers
                    j++;
                    k--;
                } else if (sum < 0) {
                    // Sum is less than zero, increment j to increase the sum
                    j++;
                } else {
                    // Sum is greater than zero, decrement k to decrease the sum
                    k--;
                }
            }
        }
        return ans;
    }
}



----------------- 
sort colors 

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        l,r = 0 , len(nums)-1
        i = 0 

        while i <= r:
            if nums[i] == 0:
                nums[l], nums[i] = nums[i], nums[l]
                l += 1
            elif nums[i] == 2:
                nums[r], nums[i] = nums[i], nums[r]
                r -= 1
                i -= 1           

            i += 1 


JAVA 
======================================
public class Solution {
    public void sortColors(int[] nums) {
        int l = 0, r = nums.length - 1;
        int i = 0;

        while (i <= r) {
            if (nums[i] == 0) {
                // Swap nums[i] and nums[l]
                int temp = nums[i];
                nums[i] = nums[l];
                nums[l] = temp;
                l++;
            } else if (nums[i] == 2) {
                // Swap nums[i] and nums[r]
                int temp = nums[i];
                nums[i] = nums[r];
                nums[r] = temp;
                r--;
                i--;
            }

            i++;
        }
    }
}


=======================================================
169 majority element

Python
========
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        res = None 
        count = 0 

        for i in range(len(nums)):
            if count == 0 :
                res = nums[i]
            if nums[i] == res:
                count += 1
            else:
                count -= 1

        return res 
        


JAVA
===========

import java.util.List;

public class Solution {
    public int majorityElement(List<Integer> nums) {
        Integer res = null;
        int count = 0;

        for (int num : nums) {
            if (count == 0) {
                res = num;
            }
            if (num.equals(res)) {
                count += 1;
            } else {
                count -= 1;
            }
        }

        return res;
    }
}

===========================
INSERT INTERVAL 

class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        start = newInterval[0]
        end = newInterval[1]
        res = []

        for i in range(len(intervals)):
            if start > intervals[i][1]:
                res.append(intervals[i])
            elif end < intervals[i][0]:
                res.append([start,end])
                res = res + intervals[i:]
                return res
            else:
                start = min (start, intervals[i][0])
                end = max (end, intervals[i][1])

        res.append([start,end])
        return res
            
===================
JAVA
import java.util.ArrayList;
import java.util.List;

public class Solution {
    public List<int[]> insert(List<int[]> intervals, int[] newInterval) {
        List<int[]> result = new ArrayList<>();
        int start = newInterval[0];
        int end = newInterval[1];

        for (int[] interval : intervals) {
            if (start > interval[1]) {
                result.add(interval);
            } else if (end < interval[0]) {
                result.add(new int[]{start, end});
                result.addAll(intervals.subList(result.size(), intervals.size()));
                return result;
            } else {
                start = Math.min(start, interval[0]);
                end = Math.max(end, interval[1]);
            }
        }

        result.add(new int[]{start, end});
        return result;
    }
}
        

C++
================
#include <vector>
using namespace std;

class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>> res;
        int start = newInterval[0], end = newInterval[1];

        for (const auto& interval : intervals) {
            if (start > interval[1]) {
                res.push_back(interval);
            } else if (end < interval[0]) {
                res.push_back({start, end});
                res.insert(res.end(), intervals.begin() + (&interval - &intervals[0]), intervals.end());
                return res;
            } else {
                start = min(start, interval[0]);
                end = max(end, interval[1]);
            }
        }

        res.push_back({start, end});
        return res;
    }
};
        
============================
MERGE INTERVALS 

Python 
================
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda x : x[0])
        res = []
        start= intervals[0][0]
        end = intervals[0][1]

        for i in range(1, len(intervals)):
            if end < intervals[i][0]:
                res.append([start,end])
                start = intervals[i][0]
                end = intervals[i][1]
            else:
                start = min(start, intervals[i][0])
                end = max(end, intervals[i][1])
        res.append([start, end])
        return res

Java 
================
class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> answer = new ArrayList<>();
        
        if(intervals.length != 0 || intervals != null){
            Arrays.sort(intervals, (a,b) -> a[0] - b[0]);
            
            int start = intervals[0][0];
            int end = intervals[0][1];
            for(int[] i: intervals){
                if(i[0] <= end){
                    end = Math.max(end, i[1]);
                } else {
                    answer.add(new int[]{start,end});
                    start = i[0];
                    end = i[1];
                }
            }
            answer.add(new int[]{start,end}); 
            
        }
        
        return answer.toArray(new int[0][]); 
    }
}


C++
============
/*

    Time Complexity : O(NlogN), Sorting the array(intervals) costs O(NlogN). Where N is the size of
    the Vector(intervals).

    Space Complexity : O(1), Constant Space. Extra space is only allocated for the Vector(output)
    which can go upto size N , however the output does not count towards the space complexity.

    Solved using Array + Sorting.

*/

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> output;
        for(auto interval : intervals){
            if(output.empty() || output.back()[1] < interval[0]){
                output.push_back(interval);
            }
            else{
                output.back()[1] = max(output.back()[1], interval[1]);
            }
        }
        return output;
    }
};
