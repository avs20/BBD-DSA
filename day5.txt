## Stack 
"""

Basically 3 operations are performed on stack:
- Push: Add an element to the top of a stack
- Pop: Remove an element from the top of a stack
- Peek: Get the top element of the stack without removing it


Stack is a LIFO (Last In First Out) data structure. 

Stack in python can be implemented using list. 
Stack in java can be implemented using ArrayList or LinkedList.
"""

class Stack:
    def __init__(self):
        self.stack = []
    
    def push(self, x):
        self.stack.append(x)
    
    def pop(self):
        if len(self.stack) == 0:
            return None
        return self.stack.pop()
    
    def peek(self):
        if len(self.stack) == 0:
            return None
        return self.stack[-1]

# BASEBALL GAME LEETCODE 648    
"""
An integer x.
Record a new score of x.
'+'.
Record a new score that is the sum of the previous two scores.
'D'.
Record a new score that is the double of the previous score.
'C'.
Invalidate the previous score, removing it from the record.
"""
class Solution:
    def calPoints(self, operations: List[str]) -> int:
        stack = []

        for op in operations:
            if op == "+":
                b = stack.pop()
                a = stack.pop()
                val = a + b
                stack.append(a)
                stack.append(b)
                stack.append(val)
            elif op == "C":
                stack.pop()
            elif op == "D":
                val = stack[-1]
                stack.append(val*2)
            else:
                stack.append(int(op))

        return sum(stack)
    

============================
cleaner 

class Solution:
    def calPoints(self, operations: List[str]) -> int:
        stack = []

        for op in operations:
            if op == "+":
                b, a = stack.pop(), stack.pop()
                val = a + b
                stack.append(a)
                stack.append(b)
                stack.append(val)
            elif op == "C":
                stack.pop()
            elif op == "D":
                val = stack[-1]
                stack.append(val*2)
            else:
                stack.append(int(op))

        return sum(stack)
    
=====================
JAVA 

import java.util.List;
import java.util.Stack;

public class Solution {
    public int calPoints(List<String> operations) {
        Stack<Integer> stack = new Stack<>();

        for (String op : operations) {
            switch (op) {
                case "+":
                    int b = stack.pop();
                    int a = stack.pop();
                    int val = a + b;
                    stack.push(a);
                    stack.push(b);
                    stack.push(val);
                    break;
                case "C":
                    stack.pop();
                    break;
                case "D":
                    val = stack.peek();
                    stack.push(val * 2);
                    break;
                default:
                    stack.push(Integer.parseInt(op));
            }
        }

        int sum = 0;
        for (int score : stack) {
            sum += score;
        }

        return sum;
    }
}


========================================
"""
232. Implement Queue using Stacks
Solved
Easy
Topics
Companies
Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

Implement the MyQueue class:
"""

class MyQueue:

    def __init__(self):
        self.stack1 = []
        self.stack2 = []
        

    def push(self, x: int) -> None:
        self.stack1.append(x)

    def pop(self) -> int:
        if len(self.stack2) == 0:
            while len(self.stack1) != 0:
                val = self.stack1.pop()
                self.stack2.append(val)
            
        return self.stack2.pop()
        

    def peek(self) -> int:
        if len(self.stack2) == 0:
            while len(self.stack1) != 0:
                val = self.stack1.pop()
                self.stack2.append(val)
            
        return self.stack2[-1]
        

    def empty(self) -> bool:
        return len(self.stack1) == 0 and len(self.stack2) == 0
        


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()

====================
java

import java.util.ArrayList;

public class MyQueue {
    private ArrayList<Integer> stack1;
    private ArrayList<Integer> stack2;

    public MyQueue() {
        this.stack1 = new ArrayList<>();
        this.stack2 = new ArrayList<>();
    }

    public void push(int x) {
        stack1.add(x);
    }

    public int pop() {
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.add(stack1.remove(stack1.size() - 1));
            }
        }
        return stack2.remove(stack2.size() - 1);
    }

    public int peek() {
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.add(stack1.remove(stack1.size() - 1));
            }
        }
        return stack2.get(stack2.size() - 1);
    }

    public boolean empty() {
        return stack1.isEmpty() && stack2.isEmpty();
    }
}

=====================================================

150. Evaluate Reverse Polish Notation
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

 class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack  = []

        for c in tokens:
            if c == "+":
                a,b = stack.pop(), stack.pop()
                stack.append(a+b)
            elif c == "-":
                a,b = stack.pop(), stack.pop()
                stack.append(b - a)
            elif c == "*":
                a,b = stack.pop(), stack.pop()
                stack.append(a * b)
            elif c == "/":
                a,b = stack.pop(), stack.pop()
                stack.append(int(b / a))
            else:
                stack.append(int(c))
        
        return stack[0]

=====================
java

import java.util.ArrayList;
import java.util.List;

public class Solution {
    public int evalRPN(String[] tokens) {
        ArrayList<Integer> stack = new ArrayList<>();

        for (String token : tokens) {
            switch (token) {
                case "+":
                    int a = stack.remove(stack.size() - 1);
                    int b = stack.remove(stack.size() - 1);
                    stack.add(b + a);
                    break;
                case "-":
                    a = stack.remove(stack.size() - 1);
                    b = stack.remove(stack.size() - 1);
                    stack.add(b - a);
                    break;
                case "*":
                    a = stack.remove(stack.size() - 1);
                    b = stack.remove(stack.size() - 1);
                    stack.add(b * a);
                    break;
                case "/":
                    a = stack.remove(stack.size() - 1);
                    b = stack.remove(stack.size() - 1);
                    stack.add((int) (b / a));
                    break;
                default:
                    stack.add(Integer.parseInt(token));
            }
        }

        return stack.get(0);
    }
}


        