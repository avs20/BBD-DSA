Time : 4*O(n) = O(n) | Space : 2O(n) = O(n)
class Solution:
    def trap(self, height: List[int]) -> int:
        
        leftMax = [0] * len(height)
        rightMax = [0] * len(height)

        lMax, rMax = 0, 0

        for i in range(len(height)):
            leftMax[i] = lMax 
            lMax = max(lMax, height[i])

        for i in reversed(range(len(height))):
            rightMax[i] = rMax
            rMax = max(rMax, height[i])
        
        area = 0 
        for i in range(len(height)):
            minHeight = min(leftMax[i], rightMax[i])
            if minHeight > height[i]:
                area += minHeight - height[i]
        
        return area
                          


===========================


1 + 1 

cur = 1 
res = 1 

ans = res + cur 

2 - 1 + 2 

cur  = 1
res  = 2

res = res + cur

(+2) + (- 1) + (+2) 

2 - 1 + 2 
cur = 0
res = 0 
sign = 1

cur = 2 
res = 0 
sign = 1

- 
cur = 0 
res = sign * cur = 2
sign = -1 

1
cur = 1 
res = 2 
sign = -1 


+
res = res + cur * sign : 2 + 1* -1= 1
cur = 0 
sign = 1

2

cur = 2 
res = 1 
sign = 1 


res = res + cur * sign 
    = 1 + 2* 1 = 3



12 + 45 

if c.isdigit():
    cur = cur * 10 + int(c)

"12"

cur = 0 

cur = 0 * 10 + 1 = 1
cur = 1 * 10 + 2 = 12 


(1+(4+5+2)-3)+(6+8)

cur = 0 
res = 0 
sign = 1     

stack = [0, 1]
res = 0 
sign = 1 

1 
cur = 1 
res = res + cur*sign = 0 + 1*1 = 1
sign = 1

(
stack = [0,1, 1,1]
cur = 0 
res = 0 
sign = 1


cur = 4 
res = 0 
sign = 1 

+ 
res  = res + cur * sign = 0 + 4*1 = 4
cur = 0 
sign = 1 

5 
cur = 5
res = 4
sign = 1

+
res = res + cur * sign = 4 + 5*1 = 9
cur = 0
sign = 1 


2
cur = 2
res = 9
sign = 1

)
res = res + cur * sign = 9 + 2*1 = 11

stack = [0,1, 1,1]

res * stacj.pop() = 11 * 1 
res = res + stack.pop() = 11 + 1 = 12 

stack = [0,1,]

-3)+(6+8)

-
res = 12
cur = 0 
sign = -1


3
cur = 3
res = 12
sign = -1

)
res = res + cur * sign = 12 + 3*-1 = 9


stac = [0,1]
sign = stack.pop()
res * sign = 9 * 1 = 9
stack = [0]
res = res + stack.pop() = 9 + 0 = 9





=====================
basic calculator 

class Solution:
    def calculate(self, s: str) -> int:
        res = 0 
        cur = 0 
        sign = 1 
        stack = []

        for c in s:            
            if c.isdigit():
                cur = cur*10 + int(c)
            
            elif c in ["+","-"]:
                res += sign * cur
                cur = 0 

                sign = 1 if c == "+" else -1
            
            elif c == "(":
                # if opening bracket then 
                stack.append(res)
                stack.append(sign)
                sign = 1 
                res = 0 

            elif c == ")":
                res += cur * sign 
                res = res * stack.pop()
                res = res + stack.pop()
                cur = 0 
                

        
        return res + sign * cur
    


==========================
2, 1, 5 , 6, 2 3 

class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
      
      area = 0 
      for i in range(len(heights):
         for j in range(i + 1, len(heights)):
            minHeight = float('inf')
            for k in range(i, j+1):
               minHeight = min(minHeight, heights[k])
            area = max(area, minHeight * (j - i + 1))

    return area
         
         


===============================
Max Area in histogram 


class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        maxArea = 0 
        stack = []

        for i, h in enumerate(heights):
            start = i 
            while stack and stack[-1][1] > h:
                index, height = stack.pop()
                maxArea = max(maxArea, height * (i-index))
                start = index
            stack.append((start, h))
        
        for i, h in stack:
            maxArea = max(maxArea, h * (len(heights)-i))
        
        return maxArea
