
Product of Array Except self

Python 
class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        O(n)
        """
        result = 1 
        left = [1] * len(nums)
        
        for i in range(1,len(nums)):
            left[i] = result * nums[i-1]
            # print(left[i])
            result = left[i]
            
        # print(left)
        
        result = 1
        right = [1] * len(nums)
        for i in reversed(range(len(nums)-1)):
            right[i] = result * nums[i+1]
            result = right[i]
    
        # print(right)
        
        result = [1] * len(nums)
        for i in range(len(nums)):
            result[i] = left[i] * right[i]
            
        return result
            
        


JAVA Solution
============================

class Solution {
    public int[] productExceptSelf(int[] nums) {

        int[] result = new int[nums.length];


        p = 1 
        for(int i = 0 ; i < nums.length ; i++){
            result[i] = p;
            p = p * nums[i];
        }

        p = 1
        for(int i = nums.length - 1 ; i >= 0 ; i--){
            result[i] = result[i] * p;
            p = p * nums[i];
        }
        return result
        
    }
}


Merge intervals 
==============
Python 

class Solution(object):
    def merge(self, intervals):

        res = []
        start = intervals[0][0]
        end = intervals[0][1]

        for i in range(1, len(intervals)):
            if end >= intervals[i][0]:
                start = min(start, intervals[i][0])
                end = max (start, intervals[i][1])
            else:
                res.append([start, end])
                start = intervals[i][0]
                end = intervals[i][1]
            
        res.append([start, end])
        return res
    
JAVA 
=====
class Solution {
      public int[][] merge(int[][] intervals) {

        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        ArrayList<int[]> res = new ArrayList<>();
        int start = intervals[0][0];
        int end = intervals[0][1];

        for (int i = 1; i < intervals.length ; i++){
            if (end >= intervals[i][0]){
                end = Math.max(end, intervals[i][1]);
            }else{
                res.add(new int[]{ start,end});
                start = intervals[i][0];
                end = intervals[i][1];
        }
        }

        res.add(new int[]{start,end});

        return res.toArray(new int[0][]);
        
    }

}

===================
Max water in container 

JAVA 
class Solution {
    public int maxArea(int[] height) {

        int l = 0 ;
        int r = height.length - 1
        res = 0;

        while (l < r){
            area = Math.min(height[l], height[r]) * (r - l);
            res = Math.max(area, res);

            if (height[l] < height[r]){
                l += 1;
            }else{
                r -= 1;
            }

        }
        return res;
        
    }
}

==========
Python 
=======
class Solution:
    def maxArea(self, height: List[int]) -> int:
        l, r = 0, len(height) -1 
        res = 0

        while l < r:
            area = (r-l) * min(height[l], height[r])
            res = max(area, res)

            if height[l] < height[r]:
                l += 1
            else:
                r -= 1
        
        return res
