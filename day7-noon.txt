# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        
        hmap = {}

        cur = head 
        while cur is not None:
            if cur in hmap:
                return True 
            
            hmap[cur] = 1
            cur = cur.next 
        
        return False
    
=======================
JAVA
======================
public class Solution {
    public boolean hasCycle(ListNode head) {
        Set<ListNode> seen = new HashSet<>();

        ListNode cur = head;
        while (cur != null) {
            if (seen.contains(cur)) {
                return true;
            }

            seen.add(cur);
            cur = cur.next;
        }

        return false;
    }
}



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        
        slow, fast = head, head 

        while fast is not None and fast.next is not None:
            slow = slow.next 
            fast = fast.next.next 
            if slow == fast:
                return True 
        
        return False
=================
JAVA
=================
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head, fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                return true;
            }
        }

        return false;
    }
}