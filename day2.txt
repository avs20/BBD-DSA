

hmap = {}

myList = ["Apple", "Banana", "Orange", "Apple", "Berry"]

for i in range(len(myList)):
    fruit = myList[i]

    if fruit not in hmap:
        hmap[fruit] = 1
    else:
        hmap[fruit] = hmap[fruit] +1

return hmap



# write the same code in java

import java.util.HashMap;
import java.util.Map;



public class Main {
    public static void main(String[] args) {
        String[] myList = {"Apple", "Banana", "Orange", "Apple", "Berry"};
        Map<String, Integer> hmap = new HashMap<>();

        for (int i = 0; i < myList.length; i++) {
            String fruit = myList[i];

            if (!hmap.containsKey(fruit)) {
                hmap.put(fruit, 1);
            } else {
                hmap.put(fruit, hmap.get(fruit) + 1);
            }
        }

        System.out.println(hmap);
    }
}


---- 
Valid parenthesis 

class Solution:
    def isValid(self, s: str) -> bool:
        
        # check if len is odd \
        if len(s) % 2 == 1 : return False

        hmap = {
            "]" : "[",
            ")" : "(",
            "}" : "{"
        }

        opens = ["(","[","{"]

        stack = []
        for i in range(len(s)):
            if s[i] in opens:
                stack.append(s[i])
            elif s[i] in hmap and len(stack) > 0 :
                if stack[-1] != hmap[s[i]]:
                    return False
                else :
                    stack.pop()
            else:
                return False
            
        return True if len(stack) == 0 else False


---- JAVA 

import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

class Solution {
    public boolean isValid(String s) {
        if (s.length() % 2 == 1) return false;

        Map<Character, Character> hmap = new HashMap<>();
        hmap.put(')', '(');
        hmap.put(']', '[');
        hmap.put('}', '{');

        char[] opens = {'(', '[', '{'};

        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == opens[0] || s.charAt(i) == opens[1] || s.charAt(i) == opens[2]) {
                stack.push(s.charAt(i));
            } else if (hmap.containsKey(s.charAt(i)) && !stack.isEmpty()) {
                if (stack.peek() != hmap.get(s.charAt(i))) {
                    return false;
                } else {
                    stack.pop();
                }
            } else {
                return false;
            }
        }

        return stack.isEmpty();
    }
}



---- best time to sell stock
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        l, r = 0,1 
        max_profit = 0

        while r < len(prices):
            if prices[l] < prices[r]:
                current_profit = prices[r] - prices[l]
                max_profit = max(max_profit, current_profit)
            else:
                l = r 
            r += 1
        
        return max_profit

---- JAVA

class Solution {
    public int maxProfit(int[] prices) {
        int l = 0, r = 1;
        int max_profit = 0;

        while (r < prices.length) {
            if (prices[l] < prices[r]) {
                int current_profit = prices[r] - prices[l];
                max_profit = Math.max(max_profit, current_profit);
            } else {
                l = r;
            }
            r++;
        }

        return max_profit;
    }
}